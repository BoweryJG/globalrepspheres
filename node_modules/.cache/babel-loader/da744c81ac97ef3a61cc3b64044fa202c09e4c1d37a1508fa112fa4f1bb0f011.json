{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import supabase from'../supabase';// Create an authentication context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// Hook for easy access to the auth context\nexport function useAuth(){return useContext(AuthContext);}// Authentication provider component\nexport function AuthProvider(_ref){let{children}=_ref;// State for the current user\nconst[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[isAdmin,setIsAdmin]=useState(false);// Function to sign in with Google\nconst signInWithGoogle=async()=>{try{const{error}=await supabase.auth.signInWithOAuth({provider:'google',options:{redirectTo:window.location.origin}});if(error)throw error;}catch(error){console.error('Error signing in with Google:',error.message);}};// Function to sign in with Facebook\nconst signInWithFacebook=async()=>{try{const{error}=await supabase.auth.signInWithOAuth({provider:'facebook',options:{redirectTo:window.location.origin}});if(error)throw error;}catch(error){console.error('Error signing in with Facebook:',error.message);}};// Function to sign in with email and password\nconst signInWithEmail=async(email,password)=>{try{const{data,error}=await supabase.auth.signInWithPassword({email,password});if(error)throw error;return data;}catch(error){console.error('Error signing in with email:',error.message);throw error;}};// Function to sign up with email and password\nconst signUpWithEmail=async function(email,password){let metadata=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{const{data,error}=await supabase.auth.signUp({email,password,options:{data:metadata}});if(error)throw error;return data;}catch(error){console.error('Error signing up with email:',error.message);throw error;}};// Function to reset password\nconst resetPassword=async email=>{try{const{error}=await supabase.auth.resetPasswordForEmail(email,{redirectTo:\"\".concat(window.location.origin,\"/reset-password\")});if(error)throw error;}catch(error){console.error('Error resetting password:',error.message);throw error;}};// Generic function to sign in with any OAuth provider\nconst signInWithProvider=async provider=>{try{const{error}=await supabase.auth.signInWithOAuth({provider,options:{redirectTo:window.location.origin}});if(error)throw error;}catch(error){console.error(\"Error signing in with \".concat(provider,\":\"),error.message);throw error;}};// Function to sign out\nconst signOut=async()=>{try{const{error}=await supabase.auth.signOut();if(error)throw error;setUser(null);}catch(error){console.error('Error signing out:',error.message);}};// Effect to set up auth state listener and handle initial session\nuseEffect(()=>{// Get the current session\nconst initializeAuth=async()=>{setLoading(true);// Check active session\nconst{data:{session}}=await supabase.auth.getSession();if(session){const{data:{user:currentUser}}=await supabase.auth.getUser();setUser(currentUser);}// Set up auth state change listener\nconst{data:authListener}=supabase.auth.onAuthStateChange(async(event,session)=>{if(session){const{data:{user:currentUser}}=await supabase.auth.getUser();setUser(currentUser);}else{setUser(null);}setLoading(false);});setLoading(false);// Clean up subscription on unmount\nreturn()=>{if(authListener&&authListener.subscription){authListener.subscription.unsubscribe();}};};initializeAuth();},[]);// Determine admin status whenever user changes\nuseEffect(()=>{var _user$user_metadata;if(!user){setIsAdmin(false);return;}const adminEmails=(process.env.REACT_APP_ADMIN_EMAILS||'').split(',').map(e=>e.trim()).filter(Boolean);if(adminEmails.includes(user.email)){setIsAdmin(true);}else if(((_user$user_metadata=user.user_metadata)===null||_user$user_metadata===void 0?void 0:_user$user_metadata.role)==='admin'){setIsAdmin(true);}else{setIsAdmin(false);}},[user]);// Values to provide through the context\nconst value={user,loading,isAdmin,signInWithGoogle,signInWithFacebook,signInWithEmail,signUpWithEmail,resetPassword,signInWithProvider,signOut};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!loading&&children});}","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsx","_jsx","AuthContext","useAuth","AuthProvider","_ref","children","user","setUser","loading","setLoading","isAdmin","setIsAdmin","signInWithGoogle","error","auth","signInWithOAuth","provider","options","redirectTo","window","location","origin","console","message","signInWithFacebook","signInWithEmail","email","password","data","signInWithPassword","signUpWithEmail","metadata","arguments","length","undefined","signUp","resetPassword","resetPasswordForEmail","concat","signInWithProvider","signOut","initializeAuth","session","getSession","currentUser","getUser","authListener","onAuthStateChange","event","subscription","unsubscribe","_user$user_metadata","adminEmails","process","env","REACT_APP_ADMIN_EMAILS","split","map","e","trim","filter","Boolean","includes","user_metadata","role","value","Provider"],"sources":["/Users/jasonsmacbookpro2022/Documents/RepSpheres-Platform/repspheres-homepage-main/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport supabase from '../supabase';\n\n// Create an authentication context\nconst AuthContext = createContext();\n\n// Hook for easy access to the auth context\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\n// Authentication provider component\nexport function AuthProvider({ children }) {\n  // State for the current user\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  // Function to sign in with Google\n  const signInWithGoogle = async () => {\n    try {\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: window.location.origin,\n        },\n      });\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error signing in with Google:', error.message);\n    }\n  };\n\n  // Function to sign in with Facebook\n  const signInWithFacebook = async () => {\n    try {\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'facebook',\n        options: {\n          redirectTo: window.location.origin,\n        },\n      });\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error signing in with Facebook:', error.message);\n    }\n  };\n\n  // Function to sign in with email and password\n  const signInWithEmail = async (email, password) => {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error signing in with email:', error.message);\n      throw error;\n    }\n  };\n\n  // Function to sign up with email and password\n  const signUpWithEmail = async (email, password, metadata = {}) => {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: metadata,\n        },\n      });\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error signing up with email:', error.message);\n      throw error;\n    }\n  };\n\n  // Function to reset password\n  const resetPassword = async (email) => {\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`,\n      });\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error resetting password:', error.message);\n      throw error;\n    }\n  };\n\n  // Generic function to sign in with any OAuth provider\n  const signInWithProvider = async (provider) => {\n    try {\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider,\n        options: {\n          redirectTo: window.location.origin,\n        },\n      });\n      if (error) throw error;\n    } catch (error) {\n      console.error(`Error signing in with ${provider}:`, error.message);\n      throw error;\n    }\n  };\n\n  // Function to sign out\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      setUser(null);\n    } catch (error) {\n      console.error('Error signing out:', error.message);\n    }\n  };\n\n  // Effect to set up auth state listener and handle initial session\n  useEffect(() => {\n    // Get the current session\n    const initializeAuth = async () => {\n      setLoading(true);\n      \n      // Check active session\n      const { data: { session } } = await supabase.auth.getSession();\n      if (session) {\n        const { data: { user: currentUser } } = await supabase.auth.getUser();\n        setUser(currentUser);\n      }\n      \n      // Set up auth state change listener\n      const { data: authListener } = supabase.auth.onAuthStateChange(\n        async (event, session) => {\n          if (session) {\n            const { data: { user: currentUser } } = await supabase.auth.getUser();\n            setUser(currentUser);\n          } else {\n            setUser(null);\n          }\n          setLoading(false);\n        }\n      );\n      \n      setLoading(false);\n      \n      // Clean up subscription on unmount\n      return () => {\n        if (authListener && authListener.subscription) {\n          authListener.subscription.unsubscribe();\n        }\n      };\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Determine admin status whenever user changes\n  useEffect(() => {\n    if (!user) {\n      setIsAdmin(false);\n      return;\n    }\n    const adminEmails = (process.env.REACT_APP_ADMIN_EMAILS || '')\n      .split(',')\n      .map((e) => e.trim())\n      .filter(Boolean);\n    if (adminEmails.includes(user.email)) {\n      setIsAdmin(true);\n    } else if (user.user_metadata?.role === 'admin') {\n      setIsAdmin(true);\n    } else {\n      setIsAdmin(false);\n    }\n  }, [user]);\n\n  // Values to provide through the context\n  const value = {\n    user,\n    loading,\n    isAdmin,\n    signInWithGoogle,\n    signInWithFacebook,\n    signInWithEmail,\n    signUpWithEmail,\n    resetPassword,\n    signInWithProvider,\n    signOut,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}